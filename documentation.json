{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-828c337471cdbeedcd1b14d605dc7b28",
            "file": "src/app/model/app-state.model.ts",
            "type": "interface",
            "sourceCode": "import { Music } from './music';\nimport { MusicState } from '../store/reducers/music.reducer';\nimport { UserState } from '../store/reducers/user.reducer';\n\nexport interface AppState {\n    readonly music: MusicState;\n}\n\nexport interface AppUserState {\n    readonly user: UserState;\n}",
            "properties": [
                {
                    "name": "music",
                    "type": "MusicState",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppUserState",
            "id": "interface-AppUserState-828c337471cdbeedcd1b14d605dc7b28",
            "file": "src/app/model/app-state.model.ts",
            "type": "interface",
            "sourceCode": "import { Music } from './music';\nimport { MusicState } from '../store/reducers/music.reducer';\nimport { UserState } from '../store/reducers/user.reducer';\n\nexport interface AppState {\n    readonly music: MusicState;\n}\n\nexport interface AppUserState {\n    readonly user: UserState;\n}",
            "properties": [
                {
                    "name": "user",
                    "type": "UserState",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Music",
            "id": "interface-Music-b2d9243a637931571b6091468d200ed1",
            "file": "src/app/model/music.ts",
            "type": "interface",
            "sourceCode": "export interface Music {\n    id?: number;\n    title?: string;\n    category?: string;\n    description?: string;\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MusicState",
            "id": "interface-MusicState-2744a962350db5755be0af2128731d2a",
            "file": "src/app/store/reducers/music.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Music } from '../../model/music';\nimport { MusicAction, MusicActionTypes } from '../actions/music.actions';\n\nexport interface MusicState {\n    list: Music[];\n    loading: boolean;\n    error: Error;\n}\n\nconst initialState: MusicState = {\n    list: [],\n    loading: false,\n    error: undefined\n};\n\nexport function musicReducer(state: MusicState = initialState, action: MusicAction) {\n    switch (action.type) {\n        case MusicActionTypes.LOAD_MUSIC:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.LOAD_MUSIC_SUCCESS:\n            return {\n                ...state,\n                list: action.payload,\n                loading: false\n            };\n\n        case MusicActionTypes.LOAD_MUSIC_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        case MusicActionTypes.ADD_MUSIC:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.ADD_MUSIC_SUCCESS:\n            return {\n                ...state,\n                list: [...state.list, action.payload],\n                loading: false\n            };\n        case MusicActionTypes.ADD_MUSIC_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        case MusicActionTypes.UPDATE_MUSIC:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.UPDATE_MUSIC_SUCCESS:\n            return {\n                ...state,\n                list: action.payload,\n                loading: false\n            };\n\n        case MusicActionTypes.UPDATE_MUSIC_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        case MusicActionTypes.DELETE_MUSIC:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.DELETE_MUSIC_SUCCESS:\n            return {\n                ...state,\n                list: state.list.filter(item => item.id !== action.payload),\n                loading: false\n            };\n\n        case MusicActionTypes.DELETE_MUSIC_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        default:\n            return state;\n    }\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "list",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-a4a499280fad6fd4de66b9f2a053f605",
            "file": "src/app/model/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n    username?: string;\n    password?: string;\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserState",
            "id": "interface-UserState-161457d4127d32f344b63cc28ba5d275",
            "file": "src/app/store/reducers/user.reducer.ts",
            "type": "interface",
            "sourceCode": "import { User } from 'src/app/model/user';\nimport { UserAction, UserActionTypes } from '../actions/user.actions';\n\nexport interface UserState {\n    list: User[];\n    loading: boolean;\n    error: Error;\n}\n\nconst initialState: UserState = {\n    list: [],\n    loading: false,\n    error: undefined\n};\n\nexport function userReducer(state: UserState = initialState, action: UserAction) {\n    switch (action.type) {\n        case UserActionTypes.LOAD_USER:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case UserActionTypes.LOAD_USER_SUCCESS:\n            return {\n                ...state,\n                list: action.payload,\n                loading: false\n            };\n\n        case UserActionTypes.LOAD_USER_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        case UserActionTypes.ADD_USER:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case UserActionTypes.ADD_USER_SUCCESS:\n            return {\n                ...state,\n                list: [...state.list, action.payload],\n                loading: false\n            };\n        case UserActionTypes.ADD_USER_FAIL:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            };\n\n        default:\n\n            return state;\n\n    }\n\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "list",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DatashareService",
            "id": "injectable-DatashareService-53ec2bf121538ef1b3b34d877537ce31",
            "file": "src/app/services/datashare.service.ts",
            "properties": [
                {
                    "name": "dataShareSubject",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "userInfo",
                    "defaultValue": "null",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setData",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unsubscribe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatashareService {\n  private dataShareSubject = new BehaviorSubject(null);\n  public userInfo: User = null;\n\n  constructor() { }\n\n  public unsubscribe(): void {\n    this.dataShareSubject = new BehaviorSubject(null);\n  }\n\n  public setData(data): void {\n    this.dataShareSubject.next(data);\n  }\n\n  public getData(): Observable<any> {\n    return this.dataShareSubject.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "MusicEffects",
            "id": "injectable-MusicEffects-049820c9a17cf8694c4e501eed9d8053",
            "file": "src/app/store/effects/music.effects.ts",
            "properties": [
                {
                    "name": "addMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data);\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { MusicService } from '../../services/music.service';\nimport { LoadMusicAction, MusicActionTypes, LoadMusicSucessAction, LoadMusicFailAction, AddMusicAction,\n   AddMusicSuccessAction, AddMusicFailAction, UpdateMusicAction, UpdateMusicSuccessAction,\n   UpdateMusicFailAction, DeleteMusicAction, DeleteMusicSuccessAction, DeleteMusicFailAction } from '../actions/music.actions';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class MusicEffects {\n\n  @Effect() loadMusic$ = this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data);\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n    );\n\n\n  @Effect() addMusic$ = this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n    );\n\n  @Effect() updateMusic$ = this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n    );\n\n  @Effect() deleteMusic$ = this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload);\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n    );\n\n\n  constructor(\n    private actions$: Actions,\n    private musicService: MusicService\n  ) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService"
                    }
                ],
                "line": 68,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MusicService",
            "id": "injectable-MusicService-0adc681f35c8210c26ae1e0cee7b1e75",
            "file": "src/app/services/music.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndPoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, pipe } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Music } from '../model/music';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MusicService {\n\n  endPoint = environment.apiEndPoint;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getAllMusic() {\n    return this.http.get(`${this.endPoint}/musicList`)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          }\n        })\n      );\n  }\n\n  addMusic(music: Music) {\n    return this.http.post(`${this.endPoint}/musicList`, music, this.httpOptions)\n      .pipe(\n        map(res => {\n          if (res) {\n            return res;\n          }\n        })\n      );\n  }\n\n  updateMusic(music: Music): Observable<Music> {\n    return this.http.put(`${this.endPoint}/musicList/${music.id}`, music)\n      .pipe(\n        map(res => {\n          if (res) {\n            return res;\n          }\n        })\n      );\n  }\n\n  deleteMusic(id: number) {\n    return this.http.delete(`${this.endPoint}/musicList/${id}`, this.httpOptions)\n      .pipe(\n        map(res => {\n          if (res) {\n            return res;\n          }\n        })\n      );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-5cc5db8d4cbfb45e662624b62d7e545c",
            "file": "src/app/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport const darkTheme = {\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n};\n\nexport const lightTheme = {\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n\n  constructor() { }\n\n  toggleDark(): void {\n    this.setTheme(darkTheme);\n  }\n\n  toggleLight(): void {\n    this.setTheme(lightTheme);\n  }\n\n  private setTheme(theme: {}): void {\n    Object.keys(theme).forEach(k =>\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "type": "injectable"
        },
        {
            "name": "UserEffects",
            "id": "injectable-UserEffects-227f6287abb7306d99cd962c7279d9b3",
            "file": "src/app/store/effects/user.effects.ts",
            "properties": [
                {
                    "name": "addUser$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<AddUserAction>(UserActionTypes.ADD_USER),\n      mergeMap(\n        (data) => this.userService.addUser(data.payload)\n          .pipe(\n            map(() => {\n              return new AddUserSuccessAction(data.payload);\n            }),\n            catchError(error => of(new AddUserFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadUser$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<LoadUserAction>(UserActionTypes.LOAD_USER),\n      mergeMap(\n        () => this.userService.getAllUsers()\n          .pipe(\n            map(data => {\n              return new LoadUserSuccessAction(data);\n            }),\n            catchError(error => of(new LoadUserFailAction(error)))\n          )\n      ),\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { UserService } from 'src/app/services/user.service';\nimport { AddUserAction, AddUserFailAction, AddUserSuccessAction, LoadUserAction,\n   LoadUserFailAction, LoadUserSuccessAction, UserActionTypes } from '../actions/user.actions';\n\n@Injectable()\nexport class UserEffects {\n\n  @Effect() loadUser$ = this.actions$\n    .pipe(\n      ofType<LoadUserAction>(UserActionTypes.LOAD_USER),\n      mergeMap(\n        () => this.userService.getAllUsers()\n          .pipe(\n            map(data => {\n              return new LoadUserSuccessAction(data);\n            }),\n            catchError(error => of(new LoadUserFailAction(error)))\n          )\n      ),\n    );\n\n  @Effect() addUser$ = this.actions$\n    .pipe(\n      ofType<AddUserAction>(UserActionTypes.ADD_USER),\n      mergeMap(\n        (data) => this.userService.addUser(data.payload)\n          .pipe(\n            map(() => {\n              return new AddUserSuccessAction(data.payload);\n            }),\n            catchError(error => of(new AddUserFailAction(error)))\n          )\n      ),\n    );\n\n  constructor(\n    private actions$: Actions,\n    private userService: UserService\n  ) {\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-613c9f36e950df8d7b33fe9a2e0e75b4",
            "file": "src/app/services/user.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndPoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { User } from '../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  endPoint = environment.apiEndPoint;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  getAllUsers() {\n    return this.http.get(`${this.endPoint}/users`)\n      .pipe(\n        map((res: any) => {\n          if (res != null) {\n            return res;\n          }\n        })\n      );\n  }\n\n  addUser(user: User) {\n    return this.http.post(`${this.endPoint}/users`, user, this.httpOptions)\n      .pipe(\n        map(res => {\n          if (res) {\n            return res;\n          }\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddMusicAction",
            "id": "class-AddMusicAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicFailAction",
            "id": "class-AddMusicFailAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicSuccessAction",
            "id": "class-AddMusicSuccessAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddUserAction",
            "id": "class-AddUserAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.ADD_USER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddUserFailAction",
            "id": "class-AddUserFailAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.ADD_USER_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddUserSuccessAction",
            "id": "class-AddUserSuccessAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.ADD_USER_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteMusicAction",
            "id": "class-DeleteMusicAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicFailAction",
            "id": "class-DeleteMusicFailAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicSuccessAction",
            "id": "class-DeleteMusicSuccessAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicAction",
            "id": "class-LoadMusicAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicFailAction",
            "id": "class-LoadMusicFailAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicSucessAction",
            "id": "class-LoadMusicSucessAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Array<Music>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Array<Music>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Array<Music>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadUserAction",
            "id": "class-LoadUserAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.LOAD_USER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadUserFailAction",
            "id": "class-LoadUserFailAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.LOAD_USER_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadUserSuccessAction",
            "id": "class-LoadUserSuccessAction-c8737d2a0233f54fc1f9d8224e67be60",
            "file": "src/app/store/actions/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/model/user';\n\nexport enum UserActionTypes {\n  LOAD_USER = '[USER] Load User',\n  LOAD_USER_SUCCESS = '[USER] Load User Success',\n  LOAD_USER_FAIL = '[USER] Load User Fail',\n  ADD_USER = '[USER] Add User',\n  ADD_USER_SUCCESS = '[USER] Add User Success',\n  ADD_USER_FAIL = '[USER] Add User Fail'\n}\n\nexport class LoadUserAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER;\n}\n\nexport class LoadUserSuccessAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_SUCCESS;\n\n  constructor(public payload: Array<User>) { }\n}\n\nexport class LoadUserFailAction implements Action {\n  readonly type = UserActionTypes.LOAD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddUserAction implements Action {\n  readonly type = UserActionTypes.ADD_USER;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserSuccessAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_SUCCESS;\n\n  constructor(public payload: User) { }\n}\n\nexport class AddUserFailAction implements Action {\n  readonly type = UserActionTypes.ADD_USER_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport type UserAction = LoadUserAction |\n  LoadUserSuccessAction |\n  LoadUserFailAction |\n  AddUserAction |\n  AddUserSuccessAction |\n  AddUserFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Array<User>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Array<User>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Array<User>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UserActionTypes.LOAD_USER_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicAction",
            "id": "class-UpdateMusicAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicFailAction",
            "id": "class-UpdateMusicFailAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicSuccessAction",
            "id": "class-UpdateMusicSuccessAction-780c90657f8bfedb7ad0558b88a1b6f7",
            "file": "src/app/store/actions/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../../model/music';\n\n\nexport enum MusicActionTypes {\n  LOAD_MUSIC = '[MUSIC] Load Music',\n  LOAD_MUSIC_SUCCESS = '[MUSIC] Load Music Success',\n  LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n  ADD_MUSIC = '[MUSIC] Add Music',\n  ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n  ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n  UPDATE_MUSIC = '[MUSIC] Update Music',\n  UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n  UPDATE_MUSIC_FAIL = '[MUSIC] Update Music Fail',\n  DELETE_MUSIC = '[MUSIC] Delete Music',\n  DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n  DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC;\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS;\n\n  constructor(public payload: Array<Music>) { }\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class AddMusicFailAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) { }\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) { }\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) { }\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) { }\n}\n\nexport type MusicAction = LoadMusicAction |\n  LoadMusicSucessAction |\n  LoadMusicFailAction |\n  AddMusicAction |\n  AddMusicSuccessAction |\n  AddMusicFailAction |\n  UpdateMusicAction |\n  UpdateMusicSuccessAction |\n  UpdateMusicFailAction |\n  DeleteMusicAction |\n  DeleteMusicSuccessAction |\n  DeleteMusicFailAction;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionComponent",
            "id": "component-ActionComponent-63edfe58d76230635b29de287bfb3ac4",
            "file": "src/app/pages/action/action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action",
            "styleUrls": [
                "./action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnclr",
                    "line": 21
                },
                {
                    "name": "category",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "description",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "id",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "title",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/model/app-state.model';\nimport { Music } from 'src/app/model/music';\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { Location } from '@angular/common';\nimport { AddMusicAction, UpdateMusicAction } from 'src/app/store/actions/music.actions';\n\n@Component({\n  selector: 'app-action',\n  templateUrl: './action.component.html',\n  styleUrls: ['./action.component.scss']\n})\nexport class ActionComponent implements OnInit {\n\n  @Input() title: string;\n  @Input() category: string;\n  @Input() description: string;\n  @Input() id: number;\n\n  @Input() btnclr;\n\n  constructor(\n    private store: Store<AppState>,\n    private location: Location,\n    private datashareService: DatashareService\n  ) { }\n\n  ngOnInit(): void {\n    this.datashareService.getData()\n      .subscribe(res => {\n        if (res != null) {\n          this.id = res.id;\n          this.title = res.title;\n          this.category = res.category;\n          this.description = res.description;\n        }\n      });\n  }\n\n  onSave(): void {\n    const request: Music = {\n      title: this.title,\n      category: this.category,\n      description: this.description\n    };\n\n    this.store.dispatch(new AddMusicAction(request));\n    this.location.back();\n  }\n\n  edit(): void {\n    const request: Music = {\n      id: this.id,\n      title: this.title,\n      category: this.category,\n      description: this.description\n    };\n    this.store.dispatch(new UpdateMusicAction(request));\n    this.location.back();\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: block;\n    border-radius: 2px;\n    background-color: var(--primary-color);\n    color: var(--text-color);\n  }\n  \n  h2 {\n    margin: 14px;\n  }\n  \n  .card {\n      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n      transition: 0.3s;\n      width: 100%;\n  \n      .container {\n          padding: 30px 16px;\n  \n          .music-details {\n              display: flex;\n              margin: 10px;\n  \n              input[type=text], textarea {\n                  width: 70%;\n                  padding: 12px;\n                  border: 1px solid #ccc;\n                  border-radius: 4px;\n                  resize: vertical;\n                  margin-left: 60px;\n                }\n  \n                label {\n                  width: 140px;\n                  padding: 12px 12px 12px 0;\n                  display: inline-block;\n                }\n          }\n        }\n  \n        .page-footer {\n          border: top;\n          padding: 10px 0;\n          display: flex;\n          justify-content: flex-end;\n          margin-right: 90px;\n      \n          button{\n            font-size: 15px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 14px;\n            margin: 4px 2px;\n            cursor: pointer; \n            border-radius: 7px;\n            padding: 10px;\n          }\n  \n          .cancel {\n              background-color: #ffff;\n              border: 1px solid #632ef5;\n              color: #632ef5;\n          }\n  \n          .save {\n              border: none;\n              background-color: #632ef5;          \n              color: white;\n          }\n        }\n  }\n",
                    "styleUrl": "./action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 *ngIf=\"!id\">Share Your Music</h2>\n<h2 *ngIf=\"id\">Edit Music</h2>\n<div class=\"card\">\n  <div class=\"container\">\n    <div class=\"music-details\">\n        <label>Music Name</label>\n        <input placeholder=\"Enter Music Name\" type=\"text\"  [(ngModel)]=\"title\" name = \"name\">\n    </div>\n    <div class=\"music-details\">\n        <label>Music Category</label>\n        <input placeholder=\"Enter Music Category\" type=\"text\" [(ngModel)]=\"category\" name=\"category\">\n    </div>\n    <div class=\"music-details\">\n        <label>Music Description</label>\n        <textarea placeholder=\"Enter Your Music Description\" [(ngModel)]=\"description\" style=\"height:200px\" name=\"description\"></textarea>\n    </div>\n  </div>\n\n  <div class=\"page-footer border-top\">\n    <button class=\"cancel\" (click)=\"cancel()\" [ngStyle]=\"{'color': btnclr}\">Cancel</button>\n    <button *ngIf=\"!id\" type=\"submit\" class=\"save\" (click)=\"onSave()\" [ngStyle]=\"{'background-color': btnclr}\">Save</button>\n    <button *ngIf=\"id\" type=\"submit\" class=\"save\" (click)=\"edit()\" [ngStyle]=\"{'background-color': btnclr}\">Edit</button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f00c146d776e56fbb2bbe5609ab622ae",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'tavisca-assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'tavisca-assignment';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-content {\n    margin-top: -15px;\n    //padding: 20px;\n    min-height: 100%;\n    width: 100%;\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!--Header-->\n<app-header></app-header>\n\n<!--Page Content-->\n<div class=\"container-fluid page-content bg-white rounded\">\n    <router-outlet></router-outlet>\n</div>\n\n<!--Footer-->\n<app-footer></app-footer>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-ce0e5bf136be052b133d4eb50892dfff",
            "file": "src/app/component/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerColor",
                    "line": 17
                },
                {
                    "name": "music",
                    "line": 11,
                    "type": "Music"
                },
                {
                    "name": "storybookColor",
                    "line": 14,
                    "type": "\"gray\" | \"blue\" | \"violet\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Music } from 'src/app/model/music';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n\n  @Input() music: Music;\n\n  @Input()\n  storybookColor: 'gray' | 'blue' | 'violet';\n\n  @Input()\n  headerColor;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-radius: 2px;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n\n.wrapper {\n    text-align: center;\n    color: black;\n   // display: flex;\n    height: 45vh;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0px;\n    width: 400px;\n    margin: 0 auto;\n  }\n  \n  .music-list {\n    margin: 30px;\n    box-shadow: 20px 20px 0px #222f3e;\n  }\n  \n  .details {\n    list-style: none;\n    background: #632ef5;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n  \n  li {\n    padding-bottom: 4px;\n  }\n  \n  h2 {\n    background: #4319b6;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n\n  body {\n    background-color: #576574;\n  }\n\n  .loading {\n    box-shadow: 20px 20px 0px pink !important;\n  }\n\n  @media screen and (min-width: 280px) and (max-width: 360px) {\n    .music-list {\n      margin: 8px;\n      width: 236px;\n    }\n  }\n\n  @media screen and (min-width: 360px) and (max-width: 650px) {\n    .music-list {\n      margin: 8px;\n      width: 301px;\n    }\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1024px) {\n    .wrapper {\n      height: 25vh;\n    }\n  }\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n    <div class=\"music-list\">\n    <div *ngIf=\"music\" class=\"list\">\n        <h2 [ngStyle]=\"{'background-color': headerColor}\">{{music.title}}</h2>\n\n    <div class=\"details\" [ngStyle]=\"{'background-color': storybookColor}\">\n        <img src=\"../../../assets/music-note.svg\"/> \n        <h3>{{music.category}}</h3>\n        <span>{{music.description}}</span>\n    </div>\n    </div>\n   </div>\n</div>\n\n\n<!--<div class=\"wrapper\">\n    <div [class.loading]=\"loading\" class=\"music-list\" *ngIf=\"!error; else error\">\n      <div class=\"list\">\n        <h2>\n          {{music.title}}\n        </h2>\n\n        <div class=\"details\">\n         <img src=\"../../../assets/music-note.svg\"/> \n         <span>{{music.category}}</span>\n         <span>{{music.description}}</span>\n        </div>\n  \n      </div>\n  \n    </div>\n  \n  \n  <ng-template #error>\n    <h2>{{error}}</h2>\n  </ng-template>\n  </div>-->\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "footer {\n    padding: 10px;\n    margin: auto;\n   // margin-top: 154px;\n    text-align: center;\n    color: #fff;\n    background: #464a54;\n    p {\n      margin: 0 auto;\n    }\n\n    position: -webkit-sticky; /* Safari */  \n    position: sticky;\n  }\n  \n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer>\n    <p>&copy; Music Share Application.</p>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bb6e89ca8fd0ecda5801f716fc3116c3",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonClr",
                    "line": 13
                },
                {
                    "name": "isDark",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "storybookClr",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "logIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ThemeService } from 'src/app/services/theme.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  @Input() storybookClr;\n  @Input() buttonClr;\n  @Input() isDark: boolean;\n\n  constructor(\n    private router: Router,\n    private themeService: ThemeService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  changeTheme() {\n    this.isDark = !this.isDark;\n    if (this.isDark) {\n      this.themeService.toggleDark();\n    } else {\n      this.themeService.toggleLight();\n    }\n  }\n\n  logIn(): void {\n    this.router.navigate(['./entry/login']);\n  }\n\n  signUp(): void {\n    this.router.navigate(['./entry/sign-up']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n // display: block;\n // padding: 4px 12px;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n\n.header {\n    background-color: #632ef5;\n    padding: 1px 15px;\n\n   span {\n     padding: 10px;\n   }\n\n    .header-right {\n        float: right;\n        margin-top: -112px;\n        padding: 42px;\n        display: flex;\n\n      button {\n        border: none;\n        background-color: #632ef5;\n        margin-right: 10px;\n      }\n\n      .theme-dark {\n        background-color: #170646;\n      }\n\n    .entry-btn {\n\n    button {\n      text-align: center;\n      text-decoration: none;\n      display: inline-block;\n      cursor: pointer;    \n      font-size: 17px;\n      margin: 3px;\n      padding: 4px;\n      padding-left: 15px;\n      padding-right: 15px;\n      font-weight: 800;\n      border: 1px solid black;\n      background-color: #3a10af;\n      }\n    }\n\n    }\n\n  }\n\n    @media screen and (min-width: 280px) and (max-width: 750px)  {\n      .header {\n        height: 170px;\n        margin: 4px; \n        \n        .header-right {\n          float: none;\n          margin-top: -70px;\n          padding: 70px;\n          display: flex;\n        }\n      }\n    }\n\n    @media screen and (min-width: 768px) and (max-width: 1024px) {\n      .header {\n         width: 763px;\n      }\n    }\n\n    @media screen and (min-width: 1024px) and (max-width: 1200px) {\n      .header {\n         width: 974px;\n      }\n    }\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\" [ngStyle]=\"{'background-color': storybookClr}\">\n    <h2>  <img src=\"../../../assets/song.svg\"/> <span>Music Share</span></h2>\n    <div class=\"header-right\">\n            <button (click)=\"changeTheme()\" [ngClass]=\"{'theme-dark': isDark}\" [ngStyle]=\"{'background-color': storybookClr}\"><img src=\"../../../assets/moon.svg\"/></button>\n            \n        <div class=\"entry-btn\">\n            <button [ngStyle]=\"{'background-color': buttonClr}\" class=\"login\" (click)=\"logIn()\">Login</button>\n            <button [ngStyle]=\"{'background-color': buttonClr}\" class=\"sign-up\" (click)=\"signUp()\">Register</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-d1edb55460e7637469abefab6d3b1320",
            "file": "src/app/component/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerColor",
                    "line": 19
                },
                {
                    "name": "musicList",
                    "line": 21
                },
                {
                    "name": "storybookColor",
                    "line": 16,
                    "type": "\"gray\" | \"blue\" | \"violet\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "musicList$",
                    "type": "Observable<Array<Music>>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Music } from 'src/app/model/music';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/model/app-state.model';\nimport { LoadMusicAction } from 'src/app/store/actions/music.actions';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  @Input()\n  storybookColor: 'gray' | 'blue' | 'violet';\n\n  @Input()\n  headerColor;\n\n  @Input() musicList;\n\n\n  musicList$: Observable<Array<Music>>;\n  constructor(\n    private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.musicList$ = this.store.select(store => store.music.list);\n    this.store.dispatch(new LoadMusicAction());\n\n    this.musicList$.forEach(res => {\n      this.musicList = res;\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-radius: 2px;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n.wrapper {\n  display: grid;\n  grid-template-columns: auto auto auto;\n}\n\n@media screen and (min-width: 280px) and (max-width: 823px) {\n .wrapper {\n   grid-template-columns: auto;\n }\n}\n\n@media screen and (min-width: 768px) and (max-width: 1024px) {\n  .wrapper {\n    grid-template-columns: auto auto;\n  }\n}\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n<div class=\"container\" *ngFor=\"let item of musicList\">\n  <app-card [music]=\"item\"></app-card>\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-2132f454efbb3cce1ae1b9315c8cf7d6",
            "file": "src/app/pages/entry/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnclr",
                    "line": 25
                },
                {
                    "name": "formclr",
                    "line": 26
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isInValidUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoggedin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "users",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "users$",
                    "type": "Observable<Array<User>>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "loginUser",
                    "args": [
                        {
                            "name": "formdata",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "formdata",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppUserState } from 'src/app/model/app-state.model';\nimport { User } from 'src/app/model/user';\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { LoadUserAction } from 'src/app/store/actions/user.actions';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  users: User[];\n  isInValidUser: boolean;\n  loginForm: FormGroup;\n  isLoggedin: boolean;\n  users$: Observable<Array<User>>;\n\n  @Input() btnclr;\n  @Input() formclr;\n\n  constructor(\n    private store: Store<AppUserState>,\n    private fb: FormBuilder,\n    private datashareService: DatashareService,\n    private router: Router,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void {\n\n    this.loginForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n\n    this.users$ = this.store.select(store => store.user.list);\n\n    this.store.dispatch(new LoadUserAction());\n\n    this.users$.forEach(res => {\n      console.log(res);\n      this.users = res;\n    });\n  }\n\n  get formControl() {\n    return this.loginForm.controls;\n  }\n\n  loginUser(formdata: any): void {\n    this.isLoggedin = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    if (formdata.username != null && formdata.password != null) {\n      const validUser = this.users.find(x => x.username === formdata.username && x.password === formdata.password);\n      if (validUser != null) {\n        this.datashareService.userInfo = validUser;\n        this.router.navigate(['../result']);\n      } else {\n        this.isInValidUser = true;\n        console.log('invalid username or password...please try again!!');\n      }\n    } else {\n      console.log('please enter usename');\n    }\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-radius: 2px;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n  \n  .card {\n      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n      transition: 0.3s;\n      width: 100%;\n\n      .error {\n        color: red;\n        font-size: 15px;\n    }\n\n      .alert {\n          padding: 7px;\n          background-color: rgb(247, 4, 4);\n          color: black;\n\n          .closebtn {\n              margin-right: -115px;\n              color: black;\n              font-weight: bold;\n              float: right;\n              font-size: 22px;\n              line-height: 20px;\n              cursor: pointer;\n              transition: 0.3s;\n            }\n            \n            .closebtn:hover {\n              color: white;\n            }\n        }\n  \n      .card:hover {\n          box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n        }\n  \n      .container {\n          padding: 28px 22px;\n        }\n    }\n  \n\nBody {  \n  font-family: Calibri, Helvetica, sans-serif;    \n}  \nbutton {   \n       background-color: #632ef5;   \n       width: 100%;  \n        color: #ffff;   \n        padding: 15px;   \n        margin: 10px 0px;   \n        border: none;   \n        cursor: pointer;   \n         }   \n\n input[type=text], input[type=password] {   \n        width: 100%;   \n        margin: 8px 0;  \n        padding: 12px 20px;   \n        display: inline-block;   \n        border: 2px solid green;   \n        box-sizing: border-box;   \n    }  \n button:hover {   \n        opacity: 0.7;   \n    }   \n  .cancelbtn {   \n        width: auto;   \n        padding: 10px 18px;  \n        margin: 10px 5px;  \n    }   \n        \n     \n .container {   \n        padding: 25px;   \n        background-color: lightblue;  \n    }\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppUserState>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppUserState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "\n     <div class=\"card\">\n        <div class=\"container\" [ngStyle]=\"{'background-color': formclr}\">  \n          <div class=\"alert\" *ngIf=\"isInValidUser\">\n            <span class=\"closebtn\" onclick=\"this.parentElement.style.display='none';\">&times;</span> \n            Invalid username or password.Please try again!\n          </div> \n          <b><h3> User Login </h3></b> \n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser(loginForm.value)\">\n            <label>Username : </label>   \n            <input type=\"text\" placeholder=\"Enter Username\" name=\"username\" required formControlName=\"username\">\n            <div *ngIf=\"isLoggedin && formControl.username.errors\">\n              <div class=\"error\" *ngIf=\"formControl.username.errors.required\">Username is required</div>\n            </div> \n\n            <label>Password : </label>   \n            <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required formControlName=\"password\"> \n            <div *ngIf=\"isLoggedin && formControl.password.errors\">\n              <div class=\"error\" *ngIf=\"formControl.password.errors.required\">Password is required</div>\n            </div>\n\n            <button type=\"submit\" [ngStyle]=\"{'background-color': btnclr}\">Login</button>   \n            <input type=\"checkbox\" checked=\"checked\"> Remember me   \n            <button type=\"button\" class=\"cancelbtn\" (click)=\"cancel()\" [ngStyle]=\"{'background-color': btnclr}\"> Cancel</button>  \n            </form>\n        </div> \n      </div>  \n "
        },
        {
            "name": "ResultComponent",
            "id": "component-ResultComponent-604b62050a4c0b1df04c899a29878eca",
            "file": "src/app/pages/result/result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-result",
            "styleUrls": [
                "./result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "btnclr",
                    "line": 22
                },
                {
                    "name": "enableEditDelete",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "musicList",
                    "line": 20,
                    "type": "Music[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "musicList$",
                    "type": "Observable<Array<Music>>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userInfo",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addNew",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "music",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "music",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "refreshMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from 'src/app/model/app-state.model';\nimport { Music } from 'src/app/model/music';\nimport { User } from 'src/app/model/user';\nimport { DatashareService } from 'src/app/services/datashare.service';\nimport { DeleteMusicAction, LoadMusicAction } from 'src/app/store/actions/music.actions';\n\n@Component({\n  selector: 'app-result',\n  templateUrl: './result.component.html',\n  styleUrls: ['./result.component.scss']\n})\nexport class ResultComponent implements OnInit {\n\n  musicList$: Observable<Array<Music>>;\n  userInfo: User;\n  @Input() musicList: Music[];\n  @Input() enableEditDelete: boolean;\n  @Input() btnclr;\n\n  constructor(\n    private store: Store<AppState>,\n    private router: Router,\n    private datashareService: DatashareService,\n  ) { }\n\n  ngOnInit(): void {\n    this.userInfo = this.datashareService.userInfo;\n    if (this.userInfo && this.userInfo.username === 'admin') {\n      this.enableEditDelete = true;\n    }\n    this.refreshMusic();\n  }\n\n  refreshMusic(): void {\n    this.musicList$ = this.store.select(store => store.music.list);\n    this.musicList$.forEach(res => {\n      if (res && res.length > 0) {\n        this.musicList = res;\n      }\n    });\n    this.store.dispatch(new LoadMusicAction());\n  }\n\n  public logOut(): void {\n    this.datashareService.userInfo = this.userInfo;\n    this.router.navigate(['../']);\n  }\n\n  addNew(): void {\n    this.datashareService.unsubscribe();\n    this.router.navigate(['../action']);\n  }\n\n  edit(music): void {\n    this.datashareService.unsubscribe();\n    this.datashareService.setData(music);\n    this.router.navigate(['../action']);\n  }\n\n  delete(music): void {\n    if (confirm('Are You Sure You want to Delete the Music : ' + music.title + '?')) {\n      this.store.dispatch(new DeleteMusicAction(music.id));\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    display: block;\n   // padding: 12px;\n    border-radius: 2px;\n    background-color: var(--primary-color);\n    color: var(--text-color);\n  }\n  \n  .page-header {\n    \n      padding: 10px;\n      display: flex;\n      justify-content: space-between;\n  \n     .buttons {\n       margin-right: -300px;\n          button {\n          text-align: center;\n          text-decoration: none;\n          display: inline-block;\n          font-size: 14px;\n          margin: 4px 2px;\n          cursor: pointer; \n          border-radius: 7px;\n          padding: 10px;\n          }\n  \n          .add-new {\n              border: none;\n              background-color: #632ef5;          \n              color: white;            \n         }\n  \n      .back {\n          background-color: #ffff;\n          border: 1px solid #632ef5;\n          color: #632ef5;\n      }\n    }\n      \n  }\n  \n  .container {\n  table {\n     // border-collapse: collapse;\n      border-spacing: 0;\n      width: 100%;\n      border: 1px solid #ddd;\n    }\n    \n    th, td {\n      text-align: left;\n      padding: 16px;\n    }\n    \n    tr:nth-child(even) {\n      background-color: #d1d1d1;\n    }\n  \n    .action {\n      border: none;\n      background-color: antiquewhite;\n    }\n  \n    \n  }\n  \n  @media screen and (min-width: 280px) and (max-width: 768px) {\n\n    .page-header {\n      .buttons {\n        margin-right: 0px;\n      }\n    }\n    table, thead, tbody, th, td, tr {\n      display: block;\n    }\n    thead tr {\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n    }\n    tr { border: 1px solid #ccc; }\n    td {\n      border: none;\n      border-bottom: 1px solid #eee;\n      position: relative;\n      padding-left: 200px;\n      margin-left: 150px;\n    }\n    td:before {\n      position: absolute;\n      top: 12px;\n      left: 6px;\n      width: 200px;\n      padding-right: 40px;\n      white-space: nowrap;\n      margin-left: -150px;\n    }\n    td:nth-of-type(1):before { content: \"Id\"; }\n    td:nth-of-type(2):before { content: \"Name\"; }\n    td:nth-of-type(3):before { content: \"Category\"; }\n    td:nth-of-type(4):before { content: \"Description\";}\n    td:nth-of-type(5):before { content: \"Edit\";}\n    td:nth-of-type(6):before { content: \"Delete\";}\n  }\n",
                    "styleUrl": "./result.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datashareService",
                        "type": "DatashareService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-header\">\n    <h3>Music Details</h3>\n    <div class=\"buttons\">\n    <button class=\"add-new\" (click)=\"addNew()\" [ngStyle]=\"{'background-color': btnclr}\">Add New</button>\n    <button class=\"back\" [ngStyle]=\"{'color': btnclr}\" (click)=\"logOut()\">\n     LogOut </button>\n    </div>\n    </div>\n    <div class=\"container\">\n     <table>\n      <tr>\n        <th>Id</th>\n        <th>Title</th>\n        <th>Category</th>\n        <th>Description</th>\n      </tr>\n      <tr *ngFor=\"let list of musicList\">\n        <td><div (click)=\"edit(list)\">{{list.id}}</div></td>\n        <td>{{list.title}}</td>\n        <td>{{list.category}}</td>\n        <td>{{list.description}}</td>\n        <td *ngIf=\"enableEditDelete\">\n           <button class=\"action\" (click)=\"edit(list)\"><img src=\"../../../assets/register.svg\"/></button>\n        </td>\n        <td *ngIf=\"enableEditDelete\">\n           <button class=\"action\" (click)=\"delete(list)\"><img src=\"../../../assets/trash.svg\"/></button>\n        </td>\n      </tr>\n     </table>\n    </div>\n    \n    "
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-012ac1392832f2ff2636135330e1943d",
            "file": "src/app/pages/entry/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isRegisterd",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "signupForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "formdata",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "formdata",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppUserState } from 'src/app/model/app-state.model';\nimport { AddUserAction } from 'src/app/store/actions/user.actions';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n\n  signupForm: FormGroup;\n  isRegisterd: boolean;\n\n  constructor(\n    private store: Store<AppUserState>,\n    private fb: FormBuilder,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.signupForm = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      firstname: ['', [Validators.required]],\n      lastname: ['', []],\n      email: ['', [Validators.required]]\n    });\n  }\n\n  get formControl() {\n    return this.signupForm.controls;\n  }\n\n  register(formdata: any): void {\n\n    this.isRegisterd = true;\n    if (this.signupForm.invalid) {\n      return;\n    } else {\n      this.store.dispatch(new AddUserAction(formdata));\n      this.router.navigate(['./entry/login']);\n    }\n  }\n\n  cancel(): void {\n    this.router.navigate(['../']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  border-radius: 2px;\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n\n    .container {\n      box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n      transition: 0.3s;\n      width: 100%;\n      padding: 20px;\n      background-color: lightblue;\n\n      .error {\n          color: red;\n          font-size: 15px;\n      }\n    }\n    \n    input[type=text], input[type=password], textarea {\n      width: 100%;   \n      margin: 8px 0;  \n      padding: 12px 20px;   \n      display: inline-block;   \n      border: 2px solid blue;   \n      box-sizing: border-box;\n    }\n    hr {\n      border: 1px solid #f1f1f1;\n      margin-bottom: 25px;\n    }\n\n    .buttons {\n        display: flex;\n\n        button {\n          padding: 16px 20px;\n          margin: 8px 0; \n          width: 100%;\n          opacity: 0.9;\n          cursor: pointer; \n          font-size: 18px;\n        }\n\n        .button:hover {\n          opacity: 1;\n        }\n\n        .registerbtn {\n          background-color: #632ef5;\n          color: #ffff;\n          border: none; \n          margin: 8px;          \n        }\n\n        .cancelbtn {\n          background-color: #ffff;\n          color: #632ef5;\n          border: 2px solid #632ef5;\n          margin: 8px;\n        }\n    }\n",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppUserState>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppUserState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formControl": {
                    "name": "formControl",
                    "getSignature": {
                        "name": "formControl",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "templateData": "<div class=\"card\">\n    <div class=\"container\">  \n    <b><h3> User Registration Form </h3></b>\n    <hr>  \n\n <form [formGroup]=\"signupForm\" (ngSubmit)=\"register(signupForm.value)\">\n  <label> Username </label>   \n  <input type=\"text\" name=\"username\" placeholder= \"Username\" size=\"15\" required formControlName=\"username\" />  \n  <div *ngIf=\"isRegisterd && formControl.username.errors\">\n    <div class=\"error\" *ngIf=\"formControl.username.errors.required\">Username is required</div>\n  </div>\n\n  <label> Firstname: </label>    \n  <input type=\"text\" name=\"firstname\" placeholder=\"Firstname\" size=\"15\"required formControlName=\"firstname\" /> \n  <div *ngIf=\"isRegisterd && formControl.firstname.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.firstname.errors.required\">Firstname is required</div>\n  </div>\n\n  <label> Lastname: </label>    \n  <input type=\"text\" name=\"lastname\" placeholder=\"Lastname\" size=\"15\" formControlName=\"lastname\" />   \n    \n  <label for=\"email\"><b>Email</b></label>  \n  <input type=\"text\" placeholder=\"Enter Email\" name=\"email\" required formControlName=\"email\">\n  <div *ngIf=\"isRegisterd && formControl.email.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.email.errors.required\">Username is required</div>\n  </div>  \n    \n  <label for=\"psw\"><b>Password</b></label>  \n  <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required formControlName=\"password\"> \n  <div *ngIf=\"isRegisterd && formControl.password.errors\">\n    <div  class=\"error\" *ngIf=\"formControl.password.errors.required\">Username is required</div>\n  </div> \n\n  <div class=\"buttons\">\n  <button type=\"submit\" class=\"registerbtn\">Register</button>\n  <button class=\"registerbtn\" class=\"cancelbtn\" (click)=\"cancel()\">Cancel</button>\n  </div>  \n  </form> \n  </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ResultComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntryModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EntryRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntryRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/music.reducer.ts",
                "type": "MusicState",
                "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/user.reducer.ts",
                "type": "UserState",
                "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n}"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
            }
        ],
        "functions": [
            {
                "name": "musicReducer",
                "file": "src/app/store/reducers/music.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "userReducer",
                "file": "src/app/store/reducers/user.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "MusicAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                "file": "src/app/store/actions/music.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "UserAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadUserAction | LoadUserSuccessAction | LoadUserFailAction | AddUserAction | AddUserSuccessAction | AddUserFailAction",
                "file": "src/app/store/actions/user.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "MusicActionTypes",
                "childs": [
                    {
                        "name": "LOAD_MUSIC",
                        "value": "[MUSIC] Load Music"
                    },
                    {
                        "name": "LOAD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Load Music Success"
                    },
                    {
                        "name": "LOAD_MUSIC_FAIL",
                        "value": "[MUSIC] Load Music Fail"
                    },
                    {
                        "name": "ADD_MUSIC",
                        "value": "[MUSIC] Add Music"
                    },
                    {
                        "name": "ADD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Add Music Success"
                    },
                    {
                        "name": "ADD_MUSIC_FAIL",
                        "value": "[MUSIC] Add Music Fail"
                    },
                    {
                        "name": "UPDATE_MUSIC",
                        "value": "[MUSIC] Update Music"
                    },
                    {
                        "name": "UPDATE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Update Music Success"
                    },
                    {
                        "name": "UPDATE_MUSIC_FAIL",
                        "value": "[MUSIC] Update Music Fail"
                    },
                    {
                        "name": "DELETE_MUSIC",
                        "value": "[MUSIC] Delete Music"
                    },
                    {
                        "name": "DELETE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Delete Music Success"
                    },
                    {
                        "name": "DELETE_MUSIC_FAIL",
                        "value": "[MUSIC] Delete Music Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/music.actions.ts"
            },
            {
                "name": "UserActionTypes",
                "childs": [
                    {
                        "name": "LOAD_USER",
                        "value": "[USER] Load User"
                    },
                    {
                        "name": "LOAD_USER_SUCCESS",
                        "value": "[USER] Load User Success"
                    },
                    {
                        "name": "LOAD_USER_FAIL",
                        "value": "[USER] Load User Fail"
                    },
                    {
                        "name": "ADD_USER",
                        "value": "[USER] Add User"
                    },
                    {
                        "name": "ADD_USER_SUCCESS",
                        "value": "[USER] Add User Success"
                    },
                    {
                        "name": "ADD_USER_FAIL",
                        "value": "[USER] Add User Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/user.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#e5e5e5',\n  'text-color': '#2d2d2d'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
                }
            ],
            "src/app/store/reducers/music.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/music.reducer.ts",
                    "type": "MusicState",
                    "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n}"
                }
            ],
            "src/app/store/reducers/user.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/user.reducer.ts",
                    "type": "UserState",
                    "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/music.reducer.ts": [
                {
                    "name": "musicReducer",
                    "file": "src/app/store/reducers/music.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/user.reducer.ts": [
                {
                    "name": "userReducer",
                    "file": "src/app/store/reducers/user.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/music.actions.ts": [
                {
                    "name": "MusicActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_MUSIC",
                            "value": "[MUSIC] Load Music"
                        },
                        {
                            "name": "LOAD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Load Music Success"
                        },
                        {
                            "name": "LOAD_MUSIC_FAIL",
                            "value": "[MUSIC] Load Music Fail"
                        },
                        {
                            "name": "ADD_MUSIC",
                            "value": "[MUSIC] Add Music"
                        },
                        {
                            "name": "ADD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Add Music Success"
                        },
                        {
                            "name": "ADD_MUSIC_FAIL",
                            "value": "[MUSIC] Add Music Fail"
                        },
                        {
                            "name": "UPDATE_MUSIC",
                            "value": "[MUSIC] Update Music"
                        },
                        {
                            "name": "UPDATE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Update Music Success"
                        },
                        {
                            "name": "UPDATE_MUSIC_FAIL",
                            "value": "[MUSIC] Update Music Fail"
                        },
                        {
                            "name": "DELETE_MUSIC",
                            "value": "[MUSIC] Delete Music"
                        },
                        {
                            "name": "DELETE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Delete Music Success"
                        },
                        {
                            "name": "DELETE_MUSIC_FAIL",
                            "value": "[MUSIC] Delete Music Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/music.actions.ts"
                }
            ],
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "UserActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_USER",
                            "value": "[USER] Load User"
                        },
                        {
                            "name": "LOAD_USER_SUCCESS",
                            "value": "[USER] Load User Success"
                        },
                        {
                            "name": "LOAD_USER_FAIL",
                            "value": "[USER] Load User Fail"
                        },
                        {
                            "name": "ADD_USER",
                            "value": "[USER] Add User"
                        },
                        {
                            "name": "ADD_USER_SUCCESS",
                            "value": "[USER] Add User Success"
                        },
                        {
                            "name": "ADD_USER_FAIL",
                            "value": "[USER] Add User Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/user.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/music.actions.ts": [
                {
                    "name": "MusicAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                    "file": "src/app/store/actions/music.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/user.actions.ts": [
                {
                    "name": "UserAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadUserAction | LoadUserSuccessAction | LoadUserFailAction | AddUserAction | AddUserSuccessAction | AddUserFailAction",
                    "file": "src/app/store/actions/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent",
                        "canActivate": []
                    },
                    {
                        "path": "entry",
                        "loadChildren": "./pages/entry/entry.module#EntryModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/entry/entry-routing.module.ts",
                                        "module": "EntryRoutingModule",
                                        "children": [
                                            {
                                                "path": "login",
                                                "component": "LoginComponent"
                                            },
                                            {
                                                "path": "sign-up",
                                                "component": "SignUpComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "EntryModule"
                            }
                        ]
                    },
                    {
                        "path": "result",
                        "component": "ResultComponent"
                    },
                    {
                        "path": "action",
                        "component": "ActionComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/component/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/model/app-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/model/app-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppUserState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/model/music.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Music",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/action/action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/entry/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/entry/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/result/result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/services/datashare.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatashareService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/music.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicSucessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadUserAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadUserFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadUserSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/music.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/user.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MusicState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "musicReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/music.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/user.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/user.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "userReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/user.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}