{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-d8bd74296742c5c58574c00a67e962da",
            "file": "src/app/model/app-state.model.ts",
            "type": "interface",
            "sourceCode": "import { Music } from './music';\nimport { MusicState } from '../store/music.reducer';\n\nexport interface AppState {\n    readonly music: MusicState\n}",
            "properties": [
                {
                    "name": "music",
                    "type": "MusicState",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Music",
            "id": "interface-Music-b2d9243a637931571b6091468d200ed1",
            "file": "src/app/model/music.ts",
            "type": "interface",
            "sourceCode": "export interface Music {\n    id?: number;\n    title?: string;\n    category?: string;\n    description?: string;\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MusicState",
            "id": "interface-MusicState-be8ee21cc854d47e183a42418d810db1",
            "file": "src/app/store/music.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Music } from \"../model/music\";\nimport { MusicAction, MusicActionTypes } from './music.actions';\n\nexport interface MusicState {\n    list: Music[],\n    loading: boolean,\n    error: Error\n  }\n  \n  const initialState: MusicState = {\n    list: [],\n    loading: false,\n    error: undefined\n  };\n\nexport function musicReducer(state: MusicState = initialState, action: MusicAction) {\n    switch(action.type)\n    {\n      case MusicActionTypes.LOAD_MUSIC :\n        return {\n            ...state,\n            loading: true\n        };\n\n      case MusicActionTypes.LOAD_MUSIC_SUCCESS :\n          return {\n              ...state,\n              list: action.payload,\n              loading: false\n          };\n\n       case MusicActionTypes.LOAD_MUSIC_FAIL :\n           return {\n               ...state,\n               error: action.payload,\n               loading: false\n           };\n\n        case MusicActionTypes.ADD_MUSIC :\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.ADD_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: [...state.list, action.payload],\n                loading: false\n                };\n        case MusicActionTypes.ADD_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC :\n            return {\n                ...state,\n                loading: true\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.DELETE_MUSIC :\n            return {\n                ...state,\n                loading: true\n                };\n\n        case MusicActionTypes.DELETE_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: state.list.filter(item => item.id !== action.payload),\n                loading: false\n                };\n\n        case MusicActionTypes.DELETE_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        default :\n            return state\n    }\n} ",
            "properties": [
                {
                    "name": "error",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "list",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MusicEffects",
            "id": "injectable-MusicEffects-6cd1f0478f6db6476f79d17fa80c81ae",
            "file": "src/app/store/music.effects.ts",
            "properties": [
                {
                    "name": "addMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data)\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { MusicService } from '../services/music.service';\nimport { LoadMusicAction, MusicActionTypes, LoadMusicSucessAction, LoadMusicFailAction, AddMusicAction, AddMusicSuccessAction, AddMusicFailAction, UpdateMusicAction, UpdateMusicSuccessAction, UpdateMusicFailAction, DeleteMusicAction, DeleteMusicSuccessAction, DeleteMusicFailAction } from './music.actions';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class MusicEffects {\n\n    @Effect() loadMusic$ = this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data)\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n  )\n\n\n  @Effect() addMusic$ = this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n  )\n\n  @Effect() updateMusic$ = this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n  )\n\n  @Effect() deleteMusic$ = this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n  )\n\n\n  constructor(\n    private actions$: Actions,\n    private musicService: MusicService\n  ) { }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MusicService",
            "id": "injectable-MusicService-eb4355d3c44f3d8899f035ec34e02105",
            "file": "src/app/services/music.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndPoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, pipe } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Music } from '../model/music';\nimport { map } from 'rxjs/operators';\n \n@Injectable({\n  providedIn: 'root'\n})\nexport class MusicService {\n \n  endPoint = environment.apiEndPoint;\n \n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n \n  constructor(\n    private http: HttpClient\n  ) { }\n \n  getAllMusic() {\n    debugger;\n    return this.http.get(`${this.endPoint}/musicList`)\n    .pipe(\n      map((res: any) => {\n        debugger;\n        if(res!=null) {\n          return res;\n        } else {\n          return null;\n        }\n      })\n    )\n  }\n \n  addMusic(music: Music) {\n   return this.http.post(`${this.endPoint}/musicList`, music, this.httpOptions)\n   .pipe(\n     map(res => {\n       if(res) {\n         return res;\n       }\n       else {\n         return null;\n       }\n     })\n   );\n  }\n \n  updateMusic(music: Music): Observable<Music> {\n    return this.http.put(`${this.endPoint}/musicList/${music.id}`, music)\n    .pipe(\n      map(res => {\n        if(res) {\n          return res;\n        }\n        else {\n          return null;\n        }\n      })\n    )\n  }\n \n  deleteMusic(id: number) {\n    return this.http.delete(`${this.endPoint}/musicList/${id}`, this.httpOptions)\n    .pipe(\n      map(res => {\n        if(res) {\n          return res;\n        } else {\n          return null;\n        }\n      })\n    );\n  }\n \n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddMusicAction",
            "id": "class-AddMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicFailAction",
            "id": "class-AddMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicSuccessAction",
            "id": "class-AddMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteMusicAction",
            "id": "class-DeleteMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicFailAction",
            "id": "class-DeleteMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicSuccessAction",
            "id": "class-DeleteMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicAction",
            "id": "class-LoadMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicFailAction",
            "id": "class-LoadMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicSucessAction",
            "id": "class-LoadMusicSucessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Array<Music>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Array<Music>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Array<Music>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicAction",
            "id": "class-UpdateMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicFailAction",
            "id": "class-UpdateMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicSuccessAction",
            "id": "class-UpdateMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f00c146d776e56fbb2bbe5609ab622ae",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'tavisca-assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'tavisca-assignment';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page-content {\n    margin-top: -15px;\n    //padding: 20px;\n    min-height: 100%;\n    width: 100%;\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<!--Header-->\n<app-header></app-header>\n\n<!--Page Content-->\n<div class=\"container-fluid page-content bg-white rounded\">\n    <router-outlet></router-outlet>\n</div>\n\n<!--Footer-->\n<app-footer></app-footer>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-868f3962f21c76b835aad91a76be5501",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "footer {\n    padding: 10px;\n    margin: auto;\n    margin-top: 154px;\n    text-align: center;\n    color: #fff;\n    background: #464a54;\n    p {\n      margin: 0 auto;\n    }\n\n    position: -webkit-sticky; /* Safari */  \n    position: sticky;\n  }\n  \n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer>\n    <p>&copy; Music Share Application.</p>\n</footer>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-1e35e5888bf46c893b621302140f87b5",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  logIn(): void {\n   // this.router.navigate(['./entry/login']);\n  }\n\n  signUp(): void {\n   // this.router.navigate(['./entry/sign-up']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\n    background-color: tomato;\n    padding: 1px 15px;\n\n    h2 {\n      font-weight: 700;\n      i {\n        color: blue;\n      }\n    }\n\n    .header-right {\n        float: right;\n        margin-top: -112px;\n        padding: 70px;\n        display: flex;\n\n      button {\n        border: none;\n        background-color: tomato;\n        margin-right: 10px;\n      }\n\n    .entry-btn {\n\n    button {\n      text-align: center;\n      text-decoration: none;\n      display: inline-block;\n      cursor: pointer;    \n      font-size: 17px;\n      margin: 3px;\n      padding: 4px;\n      padding-left: 15px;\n      padding-right: 15px;\n      font-weight: 800;\n      border: 1px solid black;\n      background-color: rgb(243, 50, 16);\n      }\n    }\n\n    }\n\n  }\n\n    @media screen and (min-width: 280px) and (max-width: 750px)  {\n      .header {\n        height: 170px;\n        margin: 4px;   \n        \n        .header-right {\n          float: none;\n          margin-top: -70px;\n          padding: 70px;\n          display: flex;\n        }\n      }\n    }\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\n    <h2>   <img src=\"../../../assets/headphones.svg\"/> Music Share</h2>\n    <div class=\"header-right\">\n            <button><img src=\"../../../assets/moon.svg\"/></button>\n            \n        <div class=\"entry-btn\">\n            <button class=\"login\" (click)=\"logIn()\">Login</button>\n            <button class=\"sign-up\" (click)=\"signUp()\">Register</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-902156ff56f2b2df0ab0c865bec48d7c",
            "file": "src/app/component/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "headerColor",
                    "line": 19
                },
                {
                    "name": "musicList",
                    "line": 21
                },
                {
                    "name": "storybookColor",
                    "line": 16,
                    "type": "\"gray\" | \"blue\" | \"violet\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "type": "Observable<Error>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loading$",
                    "type": "Observable<Boolean>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "musicList$",
                    "type": "Observable<Array<Music>>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "newMusic",
                    "defaultValue": "{ id: 0, title: '', category: '', description: '' }",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Music } from 'src/app/model/music';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/model/app-state.model';\nimport { LoadMusicAction, DeleteMusicAction, AddMusicAction } from 'src/app/store/music.actions';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  @Input()\n  storybookColor: 'gray' | 'blue' | 'violet';\n\n  @Input()\n  headerColor;\n\n  @Input() musicList;\n\n  public get bodyColor(): string[] {\n    return [`${this.storybookColor}`];\n  }\n\n  public get header(): string[] {\n   return [`${this.headerColor}`];\n}\n\n\n musicList$: Observable<Array<Music>>;\n loading$: Observable<Boolean>;\n error$: Observable<Error>;\n  newMusic: Music = { id: 0, title: '', category: '', description: '' }\n\n  constructor(\n    private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.musicList$ = this.store.select(store => store.music.list);\n    this.loading$ = this.store.select(store => store.music.loading);\n    this.error$ = this.store.select(store => store.music.error);\n\n    this.store.dispatch(new LoadMusicAction());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n    text-align: center;\n    color: white;\n   // display: flex;\n    height: 45vh;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0px;\n    width: 400px;\n    margin: 0 auto;\n  }\n  \n  .music-list {\n    box-shadow: 20px 20px 0px #222f3e;\n  }\n  \n  form {\n    display: flex;\n    flex-direction: row;\n  }\n  \n  form > input {\n    flex-grow: 1;\n    outline: none;\n    padding-left: 4px;\n    border: 0px;\n    height: 20px;\n  }\n  \n  form > button {\n    border: 0px;\n    background: #10ac84;\n    color: white;\n    outline: none;\n  \n    &:hover {\n      background: #006266;\n    }\n  }\n  \n  ul {\n    list-style: none;\n    background: #632ef5;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n  \n  li {\n    padding-bottom: 4px;\n  }\n  \n  h2 {\n    background: #4319b6;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n\n  body {\n    background-color: #576574;\n  }\n\n  .loading {\n    box-shadow: 20px 20px 0px pink !important;\n  }",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "bodyColor": {
                    "name": "bodyColor",
                    "getSignature": {
                        "name": "bodyColor",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 23
                    }
                },
                "header": {
                    "name": "header",
                    "getSignature": {
                        "name": "header",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div [class.loading]=\"(loading$ | async)\" class=\"music-list\" *ngIf=\"!(error$ | async); else error\">\n    <div class=\"list\" *ngIf=\"!musicList\">\n      <h2>\n        Music List\n      </h2>\n\n        <ul *ngIf=\"(musicList$ | async); else noItems\">\n          <li *ngFor=\"let music of musicList$ | async\">\n            <span>{{ music.title }}</span>\n          </li>\n        </ul>\n\n      <ng-template #noItems>\n        <ul>\n          <li style=\"max-width:250px;margin:0 auto;\">No items found. Are you sure there's <em>nothing</em> you want?</li>\n        </ul>\n      </ng-template>\n    </div>\n\n  </div>\n\n<div class=\"list\" *ngIf=\"musicList\">\n  <h2 [ngStyle]=\"{'background-color': header}\">\n    Music List\n  </h2>\n\n    <ul *ngIf=\"musicList ; else noItems\" [ngStyle]=\"{'background-color': bodyColor}\">\n      <li *ngFor=\"let music of musicList\">\n        <span>{{ music.title }}</span>\n      </li>\n    </ul>\n\n  <ng-template #noItems>\n    <ul>\n      <li style=\"max-width:250px;margin:0 auto;\">No items found. Are you sure there's <em>nothing</em> you want?</li>\n    </ul>\n  </ng-template>\n</div>\n\n<ng-template #error>\n  <h2>{{(error$ | async)?.message}}</h2>\n</ng-template>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/music.reducer.ts",
                "type": "MusicState",
                "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n  }"
            }
        ],
        "functions": [
            {
                "name": "musicReducer",
                "file": "src/app/store/music.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "MusicAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                "file": "src/app/store/music.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "MusicActionTypes",
                "childs": [
                    {
                        "name": "LOAD_MUSIC",
                        "value": "[MUSIC] Load Music"
                    },
                    {
                        "name": "LOAD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Load Music Success"
                    },
                    {
                        "name": "LOAD_MUSIC_FAIL",
                        "value": "[MUSIC] Load Music Fail"
                    },
                    {
                        "name": "ADD_MUSIC",
                        "value": "[MUSIC] Add Music"
                    },
                    {
                        "name": "ADD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Add Music Success"
                    },
                    {
                        "name": "ADD_MUSIC_FAIL",
                        "value": "[MUSIC] Add Music Fail"
                    },
                    {
                        "name": "UPDATE_MUSIC",
                        "value": "[MUSIC] Update Music"
                    },
                    {
                        "name": "UPDATE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Update Music Success"
                    },
                    {
                        "name": "UPDATE_MUSIC_FAIL",
                        "value": "[MUSIC] Update Music Fail"
                    },
                    {
                        "name": "DELETE_MUSIC",
                        "value": "[MUSIC] Delete Music"
                    },
                    {
                        "name": "DELETE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Delete Music Success"
                    },
                    {
                        "name": "DELETE_MUSIC_FAIL",
                        "value": "[MUSIC] Delete Music Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/music.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
                }
            ],
            "src/app/store/music.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/music.reducer.ts",
                    "type": "MusicState",
                    "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n  }"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/music.reducer.ts": [
                {
                    "name": "musicReducer",
                    "file": "src/app/store/music.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/music.actions.ts": [
                {
                    "name": "MusicActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_MUSIC",
                            "value": "[MUSIC] Load Music"
                        },
                        {
                            "name": "LOAD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Load Music Success"
                        },
                        {
                            "name": "LOAD_MUSIC_FAIL",
                            "value": "[MUSIC] Load Music Fail"
                        },
                        {
                            "name": "ADD_MUSIC",
                            "value": "[MUSIC] Add Music"
                        },
                        {
                            "name": "ADD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Add Music Success"
                        },
                        {
                            "name": "ADD_MUSIC_FAIL",
                            "value": "[MUSIC] Add Music Fail"
                        },
                        {
                            "name": "UPDATE_MUSIC",
                            "value": "[MUSIC] Update Music"
                        },
                        {
                            "name": "UPDATE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Update Music Success"
                        },
                        {
                            "name": "UPDATE_MUSIC_FAIL",
                            "value": "[MUSIC] Update Music Fail"
                        },
                        {
                            "name": "DELETE_MUSIC",
                            "value": "[MUSIC] Delete Music"
                        },
                        {
                            "name": "DELETE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Delete Music Success"
                        },
                        {
                            "name": "DELETE_MUSIC_FAIL",
                            "value": "[MUSIC] Delete Music Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/music.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/music.actions.ts": [
                {
                    "name": "MusicAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                    "file": "src/app/store/music.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent",
                        "canActivate": []
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/model/app-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/model/music.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Music",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/music.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicSucessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MusicState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "musicReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}