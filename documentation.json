{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-d8bd74296742c5c58574c00a67e962da",
            "file": "src/app/model/app-state.model.ts",
            "type": "interface",
            "sourceCode": "import { Music } from './music';\nimport { MusicState } from '../store/music.reducer';\n\nexport interface AppState {\n    readonly music: MusicState\n}",
            "properties": [
                {
                    "name": "music",
                    "type": "MusicState",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Music",
            "id": "interface-Music-b2d9243a637931571b6091468d200ed1",
            "file": "src/app/model/music.ts",
            "type": "interface",
            "sourceCode": "export interface Music {\n    id?: number;\n    title?: string;\n    category?: string;\n    description?: string;\n}",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MusicState",
            "id": "interface-MusicState-be8ee21cc854d47e183a42418d810db1",
            "file": "src/app/store/music.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Music } from \"../model/music\";\nimport { MusicAction, MusicActionTypes } from './music.actions';\n\nexport interface MusicState {\n    list: Music[],\n    loading: boolean,\n    error: Error\n  }\n  \n  const initialState: MusicState = {\n    list: [],\n    loading: false,\n    error: undefined\n  };\n\nexport function musicReducer(state: MusicState = initialState, action: MusicAction) {\n    switch(action.type)\n    {\n      case MusicActionTypes.LOAD_MUSIC :\n        return {\n            ...state,\n            loading: true\n        };\n\n      case MusicActionTypes.LOAD_MUSIC_SUCCESS :\n          return {\n              ...state,\n              list: action.payload,\n              loading: false\n          };\n\n       case MusicActionTypes.LOAD_MUSIC_FAIL :\n           return {\n               ...state,\n               error: action.payload,\n               loading: false\n           };\n\n        case MusicActionTypes.ADD_MUSIC :\n            return {\n                ...state,\n                loading: true\n            };\n\n        case MusicActionTypes.ADD_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: [...state.list, action.payload],\n                loading: false\n                };\n        case MusicActionTypes.ADD_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC :\n            return {\n                ...state,\n                loading: true\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.UPDATE_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        case MusicActionTypes.DELETE_MUSIC :\n            return {\n                ...state,\n                loading: true\n                };\n\n        case MusicActionTypes.DELETE_MUSIC_SUCCESS :\n            return {\n                ...state,\n                list: state.list.filter(item => item.id !== action.payload),\n                loading: false\n                };\n\n        case MusicActionTypes.DELETE_MUSIC_FAIL :\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n                };\n\n        default :\n            return state\n    }\n} ",
            "properties": [
                {
                    "name": "error",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "list",
                    "type": "Music[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MusicEffects",
            "id": "injectable-MusicEffects-6cd1f0478f6db6476f79d17fa80c81ae",
            "file": "src/app/store/music.effects.ts",
            "properties": [
                {
                    "name": "addMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data)\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updateMusic$",
                    "defaultValue": "this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\nimport { Effect, Actions, ofType } from '@ngrx/effects';\nimport { MusicService } from '../services/music.service';\nimport { LoadMusicAction, MusicActionTypes, LoadMusicSucessAction, LoadMusicFailAction, AddMusicAction, AddMusicSuccessAction, AddMusicFailAction, UpdateMusicAction, UpdateMusicSuccessAction, UpdateMusicFailAction, DeleteMusicAction, DeleteMusicSuccessAction, DeleteMusicFailAction } from './music.actions';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class MusicEffects {\n\n    @Effect() loadMusic$ = this.actions$\n    .pipe(\n      ofType<LoadMusicAction>(MusicActionTypes.LOAD_MUSIC),\n      mergeMap(\n        () => this.musicService.getAllMusic()\n          .pipe(\n            map(data => {\n              return new LoadMusicSucessAction(data)\n            }),\n            catchError(error => of(new LoadMusicFailAction(error)))\n          )\n      ),\n  )\n\n\n  @Effect() addMusic$ = this.actions$\n    .pipe(\n      ofType<AddMusicAction>(MusicActionTypes.ADD_MUSIC),\n      mergeMap(\n        (data) => this.musicService.addMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new AddMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new AddMusicFailAction(error)))\n          )\n      ),\n  )\n\n  @Effect() updateMusic$ = this.actions$\n    .pipe(\n      ofType<UpdateMusicAction>(MusicActionTypes.UPDATE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.updateMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new UpdateMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new UpdateMusicFailAction(error)))\n          )\n      ),\n  )\n\n  @Effect() deleteMusic$ = this.actions$\n    .pipe(\n      ofType<DeleteMusicAction>(MusicActionTypes.DELETE_MUSIC),\n      mergeMap(\n        (data) => this.musicService.deleteMusic(data.payload)\n          .pipe(\n            map(() => {\n              return new DeleteMusicSuccessAction(data.payload)\n            }),\n            catchError(error => of(new DeleteMusicFailAction(error)))\n          )\n      ),\n  )\n\n\n  constructor(\n    private actions$: Actions,\n    private musicService: MusicService\n  ) { }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musicService",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MusicService",
            "id": "injectable-MusicService-eb4355d3c44f3d8899f035ec34e02105",
            "file": "src/app/services/music.service.ts",
            "properties": [
                {
                    "name": "endPoint",
                    "defaultValue": "environment.apiEndPoint",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMusic",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllMusic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateMusic",
                    "args": [
                        {
                            "name": "music",
                            "type": "Music"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Music>",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "music",
                            "type": "Music",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, pipe } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Music } from '../model/music';\nimport { map } from 'rxjs/operators';\n \n@Injectable({\n  providedIn: 'root'\n})\nexport class MusicService {\n \n  endPoint = environment.apiEndPoint;\n \n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n \n  constructor(\n    private http: HttpClient\n  ) { }\n \n  getAllMusic() {\n    debugger;\n    return this.http.get(`${this.endPoint}/musicList`)\n    .pipe(\n      map((res: any) => {\n        debugger;\n        if(res!=null) {\n          return res;\n        } else {\n          return null;\n        }\n      })\n    )\n  }\n \n  addMusic(music: Music) {\n   return this.http.post(`${this.endPoint}/musicList`, music, this.httpOptions)\n   .pipe(\n     map(res => {\n       if(res) {\n         return res;\n       }\n       else {\n         return null;\n       }\n     })\n   );\n  }\n \n  updateMusic(music: Music): Observable<Music> {\n    return this.http.put(`${this.endPoint}/musicList/${music.id}`, music)\n    .pipe(\n      map(res => {\n        if(res) {\n          return res;\n        }\n        else {\n          return null;\n        }\n      })\n    )\n  }\n \n  deleteMusic(id: number) {\n    return this.http.delete(`${this.endPoint}/musicList/${id}`, this.httpOptions)\n    .pipe(\n      map(res => {\n        if(res) {\n          return res;\n        } else {\n          return null;\n        }\n      })\n    );\n  }\n \n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddMusicAction",
            "id": "class-AddMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicFailAction",
            "id": "class-AddMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddMusicSuccessAction",
            "id": "class-AddMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.ADD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteMusicAction",
            "id": "class-DeleteMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicFailAction",
            "id": "class-DeleteMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteMusicSuccessAction",
            "id": "class-DeleteMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.DELETE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicAction",
            "id": "class-LoadMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicFailAction",
            "id": "class-LoadMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadMusicSucessAction",
            "id": "class-LoadMusicSucessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Array<Music>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Array<Music>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Array<Music>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.LOAD_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicAction",
            "id": "class-UpdateMusicAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicFailAction",
            "id": "class-UpdateMusicFailAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Error"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Error",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateMusicSuccessAction",
            "id": "class-UpdateMusicSuccessAction-06e2d8a229e5205e7aae288314fb5b94",
            "file": "src/app/store/music.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Music } from '../model/music';\n\n\nexport enum MusicActionTypes {\n    LOAD_MUSIC = '[MUSIC] Load Music',\n    LOAD_MUSIC_SUCCESS= '[MUSIC] Load Music Success',\n    LOAD_MUSIC_FAIL = '[MUSIC] Load Music Fail',\n    ADD_MUSIC = '[MUSIC] Add Music',\n    ADD_MUSIC_SUCCESS = '[MUSIC] Add Music Success',\n    ADD_MUSIC_FAIL = '[MUSIC] Add Music Fail',\n    UPDATE_MUSIC = '[MUSIC] Update Music',\n    UPDATE_MUSIC_SUCCESS = '[MUSIC] Update Music Success',\n    UPDATE_MUSIC_FAIL  = '[MUSIC] Update Music Fail',\n    DELETE_MUSIC = '[MUSIC] Delete Music',\n    DELETE_MUSIC_SUCCESS = '[MUSIC] Delete Music Success',\n    DELETE_MUSIC_FAIL = '[MUSIC] Delete Music Fail'\n}\n\nexport class LoadMusicAction implements Action {\n    readonly type = MusicActionTypes.LOAD_MUSIC\n}\n\nexport class LoadMusicSucessAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_SUCCESS\n\n  constructor(public payload: Array<Music>) {}\n}\n\nexport class LoadMusicFailAction implements Action {\n  readonly type = MusicActionTypes.LOAD_MUSIC_FAIL\n\n  constructor(public payload: Error) {}\n}\n\nexport class AddMusicAction implements Action {\n  readonly type = MusicActionTypes.ADD_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class AddMusicSuccessAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_SUCCESS;\n  \n    constructor(public payload: Music) {}\n  }\n\nexport class AddMusicFailAction implements Action {\n    readonly type = MusicActionTypes.ADD_MUSIC_FAIL;\n  \n    constructor(public payload: Error) {}\n}\n\nexport class UpdateMusicAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_SUCCESS;\n\n  constructor(public payload: Music) {}\n}\n\nexport class UpdateMusicFailAction implements Action {\n  readonly type = MusicActionTypes.UPDATE_MUSIC_FAIL;\n\n  constructor(public payload: Error) {}\n}\n\nexport class DeleteMusicAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicSuccessAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_SUCCESS;\n\n  constructor(public payload: number) {}\n}\n\nexport class DeleteMusicFailAction implements Action {\n  readonly type = MusicActionTypes.DELETE_MUSIC_FAIL;\n\n  constructor(public payload: number) {}\n}\n\nexport type MusicAction = LoadMusicAction |\nLoadMusicSucessAction |\nLoadMusicFailAction |\nAddMusicAction |\nAddMusicSuccessAction |\nAddMusicFailAction |\nUpdateMusicAction |\nUpdateMusicSuccessAction |\nUpdateMusicFailAction |\nDeleteMusicAction |\nDeleteMusicSuccessAction |\nDeleteMusicFailAction;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Music"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Music",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Music",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "MusicActionTypes.UPDATE_MUSIC_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f00c146d776e56fbb2bbe5609ab622ae",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'tavisca-assignment'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'tavisca-assignment';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-home></app-home>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-7a6afc2ba0070ad1a45974dab63b1de7",
            "file": "src/app/component/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "music",
                    "line": 15
                },
                {
                    "name": "storybookColor",
                    "line": 18,
                    "type": "\"gray\" | \"blue\" | \"violet\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Music } from 'src/app/model/music';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/model/app-state.model';\nimport { LoadMusicAction, DeleteMusicAction, AddMusicAction } from 'src/app/store/music.actions';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  @Input() music;\n\n  @Input()\n  storybookColor: 'gray' | 'blue' | 'violet';\n\n  categories: any;\n\n  public get classes(): string[] {\n    return [`${this.storybookColor}`];\n  }\n\n /* constructor() {\n  }\n\n  ngOnInit(): void {\n  }*/\n\n\n/*  musicList$: Observable<Array<Music>>;\n  loading$: Observable<Boolean>;\n  error$: Observable<Error>;\n  newMusic: Music = { id: 0, title: '', category: '', description: '' }*/\n\n  constructor(\n    private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n   // this.musicList$ = this.store.select(store => store.music.list);\n  //  this.loading$ = this.store.select(store => store.music.loading);\n //   this.error$ = this.store.select(store => store.music.error);\n\n  //  this.store.dispatch(new LoadMusicAction());\n  }\n\n  /*deleteMusic(id: number) {\n    this.store.dispatch(new DeleteMusicAction(id));\n  }\n\n  addMusic() {\n    this.store.dispatch(new AddMusicAction(this.newMusic));\n    this.newMusic = {\n      id: 0,\n      title: '',\n      category: '',\n      description: ''\n    };\n  }*/\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n    text-align: center;\n    color: white;\n    display: flex;\n    height: 100vh;\n    flex-direction: column;\n    justify-content: center;\n    margin: 0px;\n    width: 400px;\n    margin: 0 auto;\n  }\n  \n  .music-list {\n    box-shadow: 20px 20px 0px #222f3e;\n  }\n  \n  form {\n    display: flex;\n    flex-direction: row;\n  }\n  \n  form > input {\n    flex-grow: 1;\n    outline: none;\n    padding-left: 4px;\n    border: 0px;\n    height: 20px;\n  }\n  \n  form > button {\n    border: 0px;\n    background: #10ac84;\n    color: white;\n    outline: none;\n  \n    &:hover {\n      background: #006266;\n    }\n  }\n  \n  ul {\n    list-style: none;\n    background: #632ef5;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n  \n  li {\n    padding-bottom: 4px;\n  }\n  \n  h2 {\n    background: #4319b6;\n    padding: 10px 0px;\n    margin: 0px;\n  }\n\n  body {\n    background-color: #576574;\n  }\n\n  .loading {\n    box-shadow: 20px 20px 0px pink !important;\n  }",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 22
                    }
                }
            },
            "templateData": "<!--<div class=\"wrapper\">\n  <div [class.loading]=\"(loading$ | async)\" class=\"music-list\" *ngIf=\"!(error$ | async); else error\">\n    <div class=\"list\">\n      <h2>\n        Music List\n      </h2>\n\n        <ul *ngIf=\"(musicList$ | async); else noItems\">\n          <li *ngFor=\"let music of musicList$ | async\">\n            <span>{{ music.title }}</span>\n          </li>\n        </ul>\n\n      <ng-template #noItems>\n        <ul>\n          <li style=\"max-width:250px;margin:0 auto;\">No items found. Are you sure there's <em>nothing</em> you want?</li>\n        </ul>\n      </ng-template>\n    </div>-->\n\n  <!--  <form (ngSubmit)=\"addMusic()\">\n      <input type=\"text\" [(ngModel)]=\"newMusic.title\" placeholder=\"Item\" name=\"itemName\"/>\n      <button type=\"submit\" >+</button>\n    </form>-->\n<!--  </div>\n</div>\n\n<ng-template #error>\n  <h2>{{(error$ | async)?.message}}</h2>\n</ng-template>-->\n\n\n\n<div class=\"list\">\n  <h2>\n    Music List\n  </h2>\n\n        <span>{{ music.title }}</span>\n  \n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/music.reducer.ts",
                "type": "MusicState",
                "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n  }"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "musicReducer",
                "file": "src/app/store/music.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "MusicAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                "file": "src/app/store/music.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "MusicActionTypes",
                "childs": [
                    {
                        "name": "LOAD_MUSIC",
                        "value": "[MUSIC] Load Music"
                    },
                    {
                        "name": "LOAD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Load Music Success"
                    },
                    {
                        "name": "LOAD_MUSIC_FAIL",
                        "value": "[MUSIC] Load Music Fail"
                    },
                    {
                        "name": "ADD_MUSIC",
                        "value": "[MUSIC] Add Music"
                    },
                    {
                        "name": "ADD_MUSIC_SUCCESS",
                        "value": "[MUSIC] Add Music Success"
                    },
                    {
                        "name": "ADD_MUSIC_FAIL",
                        "value": "[MUSIC] Add Music Fail"
                    },
                    {
                        "name": "UPDATE_MUSIC",
                        "value": "[MUSIC] Update Music"
                    },
                    {
                        "name": "UPDATE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Update Music Success"
                    },
                    {
                        "name": "UPDATE_MUSIC_FAIL",
                        "value": "[MUSIC] Update Music Fail"
                    },
                    {
                        "name": "DELETE_MUSIC",
                        "value": "[MUSIC] Delete Music"
                    },
                    {
                        "name": "DELETE_MUSIC_SUCCESS",
                        "value": "[MUSIC] Delete Music Success"
                    },
                    {
                        "name": "DELETE_MUSIC_FAIL",
                        "value": "[MUSIC] Delete Music Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/music.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  apiEndPoint: 'http://localhost:3000',\n  production: false\n}"
                }
            ],
            "src/app/store/music.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/music.reducer.ts",
                    "type": "MusicState",
                    "defaultValue": "{\n    list: [],\n    loading: false,\n    error: undefined\n  }"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/music.reducer.ts": [
                {
                    "name": "musicReducer",
                    "file": "src/app/store/music.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/music.actions.ts": [
                {
                    "name": "MusicActionTypes",
                    "childs": [
                        {
                            "name": "LOAD_MUSIC",
                            "value": "[MUSIC] Load Music"
                        },
                        {
                            "name": "LOAD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Load Music Success"
                        },
                        {
                            "name": "LOAD_MUSIC_FAIL",
                            "value": "[MUSIC] Load Music Fail"
                        },
                        {
                            "name": "ADD_MUSIC",
                            "value": "[MUSIC] Add Music"
                        },
                        {
                            "name": "ADD_MUSIC_SUCCESS",
                            "value": "[MUSIC] Add Music Success"
                        },
                        {
                            "name": "ADD_MUSIC_FAIL",
                            "value": "[MUSIC] Add Music Fail"
                        },
                        {
                            "name": "UPDATE_MUSIC",
                            "value": "[MUSIC] Update Music"
                        },
                        {
                            "name": "UPDATE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Update Music Success"
                        },
                        {
                            "name": "UPDATE_MUSIC_FAIL",
                            "value": "[MUSIC] Update Music Fail"
                        },
                        {
                            "name": "DELETE_MUSIC",
                            "value": "[MUSIC] Delete Music"
                        },
                        {
                            "name": "DELETE_MUSIC_SUCCESS",
                            "value": "[MUSIC] Delete Music Success"
                        },
                        {
                            "name": "DELETE_MUSIC_FAIL",
                            "value": "[MUSIC] Delete Music Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/music.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/music.actions.ts": [
                {
                    "name": "MusicAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadMusicAction | LoadMusicSucessAction | LoadMusicFailAction | AddMusicAction | AddMusicSuccessAction | AddMusicFailAction | UpdateMusicAction | UpdateMusicSuccessAction | UpdateMusicFailAction | DeleteMusicAction | DeleteMusicSuccessAction | DeleteMusicFailAction",
                    "file": "src/app/store/music.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/component/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/model/app-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/model/music.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Music",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/music.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadMusicSucessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicFailAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMusicSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MusicState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "musicReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/music.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}